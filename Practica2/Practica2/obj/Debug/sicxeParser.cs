//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\crpep\OneDrive - Universidad Autonoma de San Luis Potosi - UASLP\Laboratorio\practica 3 nohemi\Practica2\Practica2\sicxe.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Practica2 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class sicxeParser : Parser {
	public const int
		CODOPF1=1, CODOPF2=2, CODOPF3=3, REG=4, START=5, BYTE=6, WORD=7, RESB=8, 
		RESW=9, BASE=10, END=11, SEP=12, F4=13, EBSILON=14, IND=15, INM=16, CONSTHEX=17, 
		CONSTCAD=18, NUMERO2=19, ID=20, FINL=21;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_fin = 2, RULE_entrada = 3, RULE_proposiciones = 4, 
		RULE_proposicion = 5, RULE_instruccion = 6, RULE_directiva = 7, RULE_tipoDirectiva = 8, 
		RULE_etiqueta = 9, RULE_opinstruccion = 10, RULE_formato = 11, RULE_formatoUno = 12, 
		RULE_formatoDos = 13, RULE_formatoTres = 14, RULE_formatoCuatro = 15, 
		RULE_simple3 = 16, RULE_indirecto3 = 17, RULE_inmediato3 = 18, RULE_opDirectiva = 19, 
		RULE_registro = 20;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "fin", "entrada", "proposiciones", "proposicion", 
		"instruccion", "directiva", "tipoDirectiva", "etiqueta", "opinstruccion", 
		"formato", "formatoUno", "formatoDos", "formatoTres", "formatoCuatro", 
		"simple3", "indirecto3", "inmediato3", "opDirectiva", "registro"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'START'", "'BYTE'", "'WORD'", "'RESB'", 
		"'RESW'", "'BASE'", "'END'", "', '", "'+'", null, "'@'", "'#'", null, 
		null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CODOPF1", "CODOPF2", "CODOPF3", "REG", "START", "BYTE", "WORD", 
		"RESB", "RESW", "BASE", "END", "SEP", "F4", "EBSILON", "IND", "INM", "CONSTHEX", 
		"CONSTCAD", "NUMERO2", "ID", "FINL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sicxe.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public sicxeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; inicio();
			State = 43; proposiciones();
			State = 44; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(sicxeParser.START, 0); }
		public ITerminalNode NUMERO2() { return GetToken(sicxeParser.NUMERO2, 0); }
		public ITerminalNode FINL() { return GetToken(sicxeParser.FINL, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] EBSILON() { return GetTokens(sicxeParser.EBSILON); }
		public ITerminalNode EBSILON(int i) {
			return GetToken(sicxeParser.EBSILON, i);
		}
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		int _la;
		try {
			State = 59;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 46; etiqueta();
					}
				}

				State = 50;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 49; Match(EBSILON);
					}
				}

				State = 52; Match(START);
				State = 54;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 53; Match(EBSILON);
					}
				}

				State = 56; Match(NUMERO2);
				State = 57; Match(FINL);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; proposicion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(sicxeParser.END, 0); }
		public ITerminalNode FINL() { return GetToken(sicxeParser.FINL, 0); }
		public ITerminalNode EBSILON() { return GetToken(sicxeParser.EBSILON, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fin);
		int _la;
		try {
			State = 76;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 61; Match(EBSILON);
					}
				}

				State = 64; Match(END);
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 65; entrada();
					}
				}

				State = 68; Match(FINL);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 69; Match(EBSILON);
					}
				}

				State = 72; Match(END);
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 73; entrada();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(sicxeParser.ID, 0); }
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_entrada);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionesContext : ParserRuleContext {
		public ProposicionContext[] proposicion() {
			return GetRuleContexts<ProposicionContext>();
		}
		public ProposicionContext proposicion(int i) {
			return GetRuleContext<ProposicionContext>(i);
		}
		public ProposicionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposiciones; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterProposiciones(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitProposiciones(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposiciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionesContext proposiciones() {
		ProposicionesContext _localctx = new ProposicionesContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_proposiciones);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 80; proposicion();
			}
			{
			State = 84;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 81; proposicion();
					}
					} 
				}
				State = 86;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposicion);
		try {
			State = 89;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; instruccion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; directiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(sicxeParser.FINL, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode EBSILON() { return GetToken(sicxeParser.EBSILON, 0); }
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_instruccion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 91; etiqueta();
				}
			}

			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EBSILON) {
				{
				State = 94; Match(EBSILON);
				}
			}

			State = 97; opinstruccion();
			State = 98; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public TipoDirectivaContext tipoDirectiva() {
			return GetRuleContext<TipoDirectivaContext>(0);
		}
		public OpDirectivaContext opDirectiva() {
			return GetRuleContext<OpDirectivaContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(sicxeParser.FINL, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] EBSILON() { return GetTokens(sicxeParser.EBSILON); }
		public ITerminalNode EBSILON(int i) {
			return GetToken(sicxeParser.EBSILON, i);
		}
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 100; etiqueta();
				}
			}

			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EBSILON) {
				{
				State = 103; Match(EBSILON);
				}
			}

			State = 106; tipoDirectiva();
			State = 108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EBSILON) {
				{
				State = 107; Match(EBSILON);
				}
			}

			State = 110; opDirectiva();
			State = 111; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoDirectivaContext : ParserRuleContext {
		public ITerminalNode BYTE() { return GetToken(sicxeParser.BYTE, 0); }
		public ITerminalNode WORD() { return GetToken(sicxeParser.WORD, 0); }
		public ITerminalNode RESB() { return GetToken(sicxeParser.RESB, 0); }
		public ITerminalNode RESW() { return GetToken(sicxeParser.RESW, 0); }
		public ITerminalNode BASE() { return GetToken(sicxeParser.BASE, 0); }
		public TipoDirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoDirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterTipoDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitTipoDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoDirectivaContext tipoDirectiva() {
		TipoDirectivaContext _localctx = new TipoDirectivaContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_tipoDirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << WORD) | (1L << RESB) | (1L << RESW) | (1L << BASE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(sicxeParser.ID, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_etiqueta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public FormatoContext formato() {
			return GetRuleContext<FormatoContext>(0);
		}
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterOpinstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitOpinstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_opinstruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; formato();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoContext : ParserRuleContext {
		public FormatoUnoContext formatoUno() {
			return GetRuleContext<FormatoUnoContext>(0);
		}
		public FormatoDosContext formatoDos() {
			return GetRuleContext<FormatoDosContext>(0);
		}
		public FormatoTresContext formatoTres() {
			return GetRuleContext<FormatoTresContext>(0);
		}
		public FormatoCuatroContext formatoCuatro() {
			return GetRuleContext<FormatoCuatroContext>(0);
		}
		public FormatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterFormato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitFormato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoContext formato() {
		FormatoContext _localctx = new FormatoContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_formato);
		try {
			State = 123;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CODOPF1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; formatoUno();
				}
				break;
			case CODOPF2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; formatoDos();
				}
				break;
			case CODOPF3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; formatoTres();
				}
				break;
			case F4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; formatoCuatro();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoUnoContext : ParserRuleContext {
		public ITerminalNode CODOPF1() { return GetToken(sicxeParser.CODOPF1, 0); }
		public ITerminalNode EBSILON() { return GetToken(sicxeParser.EBSILON, 0); }
		public FormatoUnoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatoUno; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterFormatoUno(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitFormatoUno(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatoUno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoUnoContext formatoUno() {
		FormatoUnoContext _localctx = new FormatoUnoContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_formatoUno);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(CODOPF1);
			State = 127;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EBSILON) {
				{
				State = 126; Match(EBSILON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoDosContext : ParserRuleContext {
		public ITerminalNode CODOPF2() { return GetToken(sicxeParser.CODOPF2, 0); }
		public ITerminalNode NUMERO2() { return GetToken(sicxeParser.NUMERO2, 0); }
		public ITerminalNode[] EBSILON() { return GetTokens(sicxeParser.EBSILON); }
		public ITerminalNode EBSILON(int i) {
			return GetToken(sicxeParser.EBSILON, i);
		}
		public ITerminalNode[] REG() { return GetTokens(sicxeParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(sicxeParser.REG, i);
		}
		public ITerminalNode SEP() { return GetToken(sicxeParser.SEP, 0); }
		public FormatoDosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatoDos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterFormatoDos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitFormatoDos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatoDos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoDosContext formatoDos() {
		FormatoDosContext _localctx = new FormatoDosContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_formatoDos);
		int _la;
		try {
			State = 159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; Match(CODOPF2);
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 130; Match(EBSILON);
					}
				}

				State = 133; Match(NUMERO2);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; Match(CODOPF2);
				State = 136;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 135; Match(EBSILON);
					}
				}

				State = 138; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 139; Match(CODOPF2);
				State = 141;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 140; Match(EBSILON);
					}
				}

				State = 143; Match(REG);
				State = 145;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 144; Match(EBSILON);
					}
				}

				State = 147; Match(SEP);
				State = 148; Match(REG);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149; Match(CODOPF2);
				State = 151;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 150; Match(EBSILON);
					}
				}

				State = 153; Match(REG);
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 154; Match(EBSILON);
					}
				}

				State = 157; Match(SEP);
				State = 158; Match(NUMERO2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoTresContext : ParserRuleContext {
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirecto3Context indirecto3() {
			return GetRuleContext<Indirecto3Context>(0);
		}
		public Inmediato3Context inmediato3() {
			return GetRuleContext<Inmediato3Context>(0);
		}
		public FormatoTresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatoTres; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterFormatoTres(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitFormatoTres(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatoTres(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoTresContext formatoTres() {
		FormatoTresContext _localctx = new FormatoTresContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_formatoTres);
		try {
			State = 164;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; simple3();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; indirecto3();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; inmediato3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoCuatroContext : ParserRuleContext {
		public ITerminalNode F4() { return GetToken(sicxeParser.F4, 0); }
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirecto3Context indirecto3() {
			return GetRuleContext<Indirecto3Context>(0);
		}
		public Inmediato3Context inmediato3() {
			return GetRuleContext<Inmediato3Context>(0);
		}
		public FormatoCuatroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatoCuatro; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterFormatoCuatro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitFormatoCuatro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatoCuatro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoCuatroContext formatoCuatro() {
		FormatoCuatroContext _localctx = new FormatoCuatroContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_formatoCuatro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(F4);
			State = 170;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 167; simple3();
				}
				break;

			case 2:
				{
				State = 168; indirecto3();
				}
				break;

			case 3:
				{
				State = 169; inmediato3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(sicxeParser.CODOPF3, 0); }
		public ITerminalNode ID() { return GetToken(sicxeParser.ID, 0); }
		public ITerminalNode[] EBSILON() { return GetTokens(sicxeParser.EBSILON); }
		public ITerminalNode EBSILON(int i) {
			return GetToken(sicxeParser.EBSILON, i);
		}
		public ITerminalNode NUMERO2() { return GetToken(sicxeParser.NUMERO2, 0); }
		public ITerminalNode SEP() { return GetToken(sicxeParser.SEP, 0); }
		public ITerminalNode REG() { return GetToken(sicxeParser.REG, 0); }
		public Simple3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterSimple3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitSimple3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple3Context simple3() {
		Simple3Context _localctx = new Simple3Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_simple3);
		int _la;
		try {
			State = 208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; Match(CODOPF3);
				State = 174;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 173; Match(EBSILON);
					}
				}

				State = 176; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; Match(CODOPF3);
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 178; Match(EBSILON);
					}
				}

				State = 181; Match(NUMERO2);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182; Match(CODOPF3);
				State = 184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 183; Match(EBSILON);
					}
				}

				State = 186; Match(NUMERO2);
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 187; Match(EBSILON);
					}
				}

				State = 190; Match(SEP);
				State = 192;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 191; Match(EBSILON);
					}
				}

				State = 194; Match(REG);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 195; Match(CODOPF3);
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 196; Match(EBSILON);
					}
				}

				State = 199; Match(ID);
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 200; Match(EBSILON);
					}
				}

				State = 203; Match(SEP);
				State = 205;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 204; Match(EBSILON);
					}
				}

				State = 207; Match(REG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirecto3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(sicxeParser.CODOPF3, 0); }
		public ITerminalNode IND() { return GetToken(sicxeParser.IND, 0); }
		public ITerminalNode NUMERO2() { return GetToken(sicxeParser.NUMERO2, 0); }
		public ITerminalNode[] EBSILON() { return GetTokens(sicxeParser.EBSILON); }
		public ITerminalNode EBSILON(int i) {
			return GetToken(sicxeParser.EBSILON, i);
		}
		public ITerminalNode ID() { return GetToken(sicxeParser.ID, 0); }
		public Indirecto3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterIndirecto3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitIndirecto3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirecto3Context indirecto3() {
		Indirecto3Context _localctx = new Indirecto3Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_indirecto3);
		int _la;
		try {
			State = 228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210; Match(CODOPF3);
				State = 212;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 211; Match(EBSILON);
					}
				}

				State = 214; Match(IND);
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 215; Match(EBSILON);
					}
				}

				State = 218; Match(NUMERO2);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; Match(CODOPF3);
				State = 221;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 220; Match(EBSILON);
					}
				}

				State = 223; Match(IND);
				State = 225;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 224; Match(EBSILON);
					}
				}

				State = 227; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmediato3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(sicxeParser.CODOPF3, 0); }
		public ITerminalNode INM() { return GetToken(sicxeParser.INM, 0); }
		public ITerminalNode NUMERO2() { return GetToken(sicxeParser.NUMERO2, 0); }
		public ITerminalNode[] EBSILON() { return GetTokens(sicxeParser.EBSILON); }
		public ITerminalNode EBSILON(int i) {
			return GetToken(sicxeParser.EBSILON, i);
		}
		public ITerminalNode ID() { return GetToken(sicxeParser.ID, 0); }
		public Inmediato3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterInmediato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitInmediato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmediato3Context inmediato3() {
		Inmediato3Context _localctx = new Inmediato3Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_inmediato3);
		int _la;
		try {
			State = 248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230; Match(CODOPF3);
				State = 232;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 231; Match(EBSILON);
					}
				}

				State = 234; Match(INM);
				State = 236;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 235; Match(EBSILON);
					}
				}

				State = 238; Match(NUMERO2);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; Match(CODOPF3);
				State = 241;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 240; Match(EBSILON);
					}
				}

				State = 243; Match(INM);
				State = 245;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EBSILON) {
					{
					State = 244; Match(EBSILON);
					}
				}

				State = 247; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpDirectivaContext : ParserRuleContext {
		public ITerminalNode NUMERO2() { return GetToken(sicxeParser.NUMERO2, 0); }
		public ITerminalNode CONSTHEX() { return GetToken(sicxeParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(sicxeParser.CONSTCAD, 0); }
		public ITerminalNode ID() { return GetToken(sicxeParser.ID, 0); }
		public OpDirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opDirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterOpDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitOpDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpDirectivaContext opDirectiva() {
		OpDirectivaContext _localctx = new OpDirectivaContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_opDirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTHEX) | (1L << CONSTCAD) | (1L << NUMERO2) | (1L << ID))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegistroContext : ParserRuleContext {
		public ITerminalNode REG() { return GetToken(sicxeParser.REG, 0); }
		public RegistroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_registro; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.EnterRegistro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeListener typedListener = listener as IsicxeListener;
			if (typedListener != null) typedListener.ExitRegistro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeVisitor<TResult> typedVisitor = visitor as IsicxeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegistro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegistroContext registro() {
		RegistroContext _localctx = new RegistroContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_registro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(REG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x17\x101\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x32\n\x3\x3\x3\x5\x3"+
		"\x35\n\x3\x3\x3\x3\x3\x5\x3\x39\n\x3\x3\x3\x3\x3\x3\x3\x5\x3>\n\x3\x3"+
		"\x4\x5\x4\x41\n\x4\x3\x4\x3\x4\x5\x4\x45\n\x4\x3\x4\x3\x4\x5\x4I\n\x4"+
		"\x3\x4\x3\x4\x5\x4M\n\x4\x5\x4O\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\a\x6U\n\x6"+
		"\f\x6\xE\x6X\v\x6\x3\a\x3\a\x5\a\\\n\a\x3\b\x5\b_\n\b\x3\b\x5\b\x62\n"+
		"\b\x3\b\x3\b\x3\b\x3\t\x5\th\n\t\x3\t\x5\tk\n\t\x3\t\x3\t\x5\to\n\t\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r~\n"+
		"\r\x3\xE\x3\xE\x5\xE\x82\n\xE\x3\xF\x3\xF\x5\xF\x86\n\xF\x3\xF\x3\xF\x3"+
		"\xF\x5\xF\x8B\n\xF\x3\xF\x3\xF\x3\xF\x5\xF\x90\n\xF\x3\xF\x3\xF\x5\xF"+
		"\x94\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x9A\n\xF\x3\xF\x3\xF\x5\xF\x9E"+
		"\n\xF\x3\xF\x3\xF\x5\xF\xA2\n\xF\x3\x10\x3\x10\x3\x10\x5\x10\xA7\n\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xAD\n\x11\x3\x12\x3\x12\x5\x12\xB1"+
		"\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\xB6\n\x12\x3\x12\x3\x12\x3\x12\x5\x12"+
		"\xBB\n\x12\x3\x12\x3\x12\x5\x12\xBF\n\x12\x3\x12\x3\x12\x5\x12\xC3\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x5\x12\xC8\n\x12\x3\x12\x3\x12\x5\x12\xCC\n\x12"+
		"\x3\x12\x3\x12\x5\x12\xD0\n\x12\x3\x12\x5\x12\xD3\n\x12\x3\x13\x3\x13"+
		"\x5\x13\xD7\n\x13\x3\x13\x3\x13\x5\x13\xDB\n\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\xE0\n\x13\x3\x13\x3\x13\x5\x13\xE4\n\x13\x3\x13\x5\x13\xE7\n\x13"+
		"\x3\x14\x3\x14\x5\x14\xEB\n\x14\x3\x14\x3\x14\x5\x14\xEF\n\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\xF4\n\x14\x3\x14\x3\x14\x5\x14\xF8\n\x14\x3\x14"+
		"\x5\x14\xFB\n\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x2\x2\x2\x17\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2\x2\x4\x3\x2\b\f\x3\x2\x13\x16"+
		"\x121\x2,\x3\x2\x2\x2\x4=\x3\x2\x2\x2\x6N\x3\x2\x2\x2\bP\x3\x2\x2\x2\n"+
		"R\x3\x2\x2\x2\f[\x3\x2\x2\x2\xE^\x3\x2\x2\x2\x10g\x3\x2\x2\x2\x12s\x3"+
		"\x2\x2\x2\x14u\x3\x2\x2\x2\x16w\x3\x2\x2\x2\x18}\x3\x2\x2\x2\x1A\x7F\x3"+
		"\x2\x2\x2\x1C\xA1\x3\x2\x2\x2\x1E\xA6\x3\x2\x2\x2 \xA8\x3\x2\x2\x2\"\xD2"+
		"\x3\x2\x2\x2$\xE6\x3\x2\x2\x2&\xFA\x3\x2\x2\x2(\xFC\x3\x2\x2\x2*\xFE\x3"+
		"\x2\x2\x2,-\x5\x4\x3\x2-.\x5\n\x6\x2./\x5\x6\x4\x2/\x3\x3\x2\x2\x2\x30"+
		"\x32\x5\x14\v\x2\x31\x30\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3\x2"+
		"\x2\x2\x33\x35\a\x10\x2\x2\x34\x33\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35"+
		"\x36\x3\x2\x2\x2\x36\x38\a\a\x2\x2\x37\x39\a\x10\x2\x2\x38\x37\x3\x2\x2"+
		"\x2\x38\x39\x3\x2\x2\x2\x39:\x3\x2\x2\x2:;\a\x15\x2\x2;>\a\x17\x2\x2<"+
		">\x5\f\a\x2=\x31\x3\x2\x2\x2=<\x3\x2\x2\x2>\x5\x3\x2\x2\x2?\x41\a\x10"+
		"\x2\x2@?\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\a\r"+
		"\x2\x2\x43\x45\x5\b\x5\x2\x44\x43\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45"+
		"\x46\x3\x2\x2\x2\x46O\a\x17\x2\x2GI\a\x10\x2\x2HG\x3\x2\x2\x2HI\x3\x2"+
		"\x2\x2IJ\x3\x2\x2\x2JL\a\r\x2\x2KM\x5\b\x5\x2LK\x3\x2\x2\x2LM\x3\x2\x2"+
		"\x2MO\x3\x2\x2\x2N@\x3\x2\x2\x2NH\x3\x2\x2\x2O\a\x3\x2\x2\x2PQ\a\x16\x2"+
		"\x2Q\t\x3\x2\x2\x2RV\x5\f\a\x2SU\x5\f\a\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2"+
		"VT\x3\x2\x2\x2VW\x3\x2\x2\x2W\v\x3\x2\x2\x2XV\x3\x2\x2\x2Y\\\x5\xE\b\x2"+
		"Z\\\x5\x10\t\x2[Y\x3\x2\x2\x2[Z\x3\x2\x2\x2\\\r\x3\x2\x2\x2]_\x5\x14\v"+
		"\x2^]\x3\x2\x2\x2^_\x3\x2\x2\x2_\x61\x3\x2\x2\x2`\x62\a\x10\x2\x2\x61"+
		"`\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\x5\x16\f"+
		"\x2\x64\x65\a\x17\x2\x2\x65\xF\x3\x2\x2\x2\x66h\x5\x14\v\x2g\x66\x3\x2"+
		"\x2\x2gh\x3\x2\x2\x2hj\x3\x2\x2\x2ik\a\x10\x2\x2ji\x3\x2\x2\x2jk\x3\x2"+
		"\x2\x2kl\x3\x2\x2\x2ln\x5\x12\n\x2mo\a\x10\x2\x2nm\x3\x2\x2\x2no\x3\x2"+
		"\x2\x2op\x3\x2\x2\x2pq\x5(\x15\x2qr\a\x17\x2\x2r\x11\x3\x2\x2\x2st\t\x2"+
		"\x2\x2t\x13\x3\x2\x2\x2uv\a\x16\x2\x2v\x15\x3\x2\x2\x2wx\x5\x18\r\x2x"+
		"\x17\x3\x2\x2\x2y~\x5\x1A\xE\x2z~\x5\x1C\xF\x2{~\x5\x1E\x10\x2|~\x5 \x11"+
		"\x2}y\x3\x2\x2\x2}z\x3\x2\x2\x2}{\x3\x2\x2\x2}|\x3\x2\x2\x2~\x19\x3\x2"+
		"\x2\x2\x7F\x81\a\x3\x2\x2\x80\x82\a\x10\x2\x2\x81\x80\x3\x2\x2\x2\x81"+
		"\x82\x3\x2\x2\x2\x82\x1B\x3\x2\x2\x2\x83\x85\a\x4\x2\x2\x84\x86\a\x10"+
		"\x2\x2\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87"+
		"\xA2\a\x15\x2\x2\x88\x8A\a\x4\x2\x2\x89\x8B\a\x10\x2\x2\x8A\x89\x3\x2"+
		"\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\xA2\a\x6\x2\x2\x8D"+
		"\x8F\a\x4\x2\x2\x8E\x90\a\x10\x2\x2\x8F\x8E\x3\x2\x2\x2\x8F\x90\x3\x2"+
		"\x2\x2\x90\x91\x3\x2\x2\x2\x91\x93\a\x6\x2\x2\x92\x94\a\x10\x2\x2\x93"+
		"\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\a\xE"+
		"\x2\x2\x96\xA2\a\x6\x2\x2\x97\x99\a\x4\x2\x2\x98\x9A\a\x10\x2\x2\x99\x98"+
		"\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9D\a\x6\x2\x2"+
		"\x9C\x9E\a\x10\x2\x2\x9D\x9C\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\x3"+
		"\x2\x2\x2\x9F\xA0\a\xE\x2\x2\xA0\xA2\a\x15\x2\x2\xA1\x83\x3\x2\x2\x2\xA1"+
		"\x88\x3\x2\x2\x2\xA1\x8D\x3\x2\x2\x2\xA1\x97\x3\x2\x2\x2\xA2\x1D\x3\x2"+
		"\x2\x2\xA3\xA7\x5\"\x12\x2\xA4\xA7\x5$\x13\x2\xA5\xA7\x5&\x14\x2\xA6\xA3"+
		"\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7\x1F\x3\x2\x2"+
		"\x2\xA8\xAC\a\xF\x2\x2\xA9\xAD\x5\"\x12\x2\xAA\xAD\x5$\x13\x2\xAB\xAD"+
		"\x5&\x14\x2\xAC\xA9\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAB\x3\x2\x2\x2"+
		"\xAD!\x3\x2\x2\x2\xAE\xB0\a\x5\x2\x2\xAF\xB1\a\x10\x2\x2\xB0\xAF\x3\x2"+
		"\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xD3\a\x16\x2\x2\xB3"+
		"\xB5\a\x5\x2\x2\xB4\xB6\a\x10\x2\x2\xB5\xB4\x3\x2\x2\x2\xB5\xB6\x3\x2"+
		"\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xD3\a\x15\x2\x2\xB8\xBA\a\x5\x2\x2\xB9"+
		"\xBB\a\x10\x2\x2\xBA\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2"+
		"\x2\x2\xBC\xBE\a\x15\x2\x2\xBD\xBF\a\x10\x2\x2\xBE\xBD\x3\x2\x2\x2\xBE"+
		"\xBF\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2\a\xE\x2\x2\xC1\xC3\a\x10"+
		"\x2\x2\xC2\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4"+
		"\xD3\a\x6\x2\x2\xC5\xC7\a\x5\x2\x2\xC6\xC8\a\x10\x2\x2\xC7\xC6\x3\x2\x2"+
		"\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\a\x16\x2\x2\xCA\xCC"+
		"\a\x10\x2\x2\xCB\xCA\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCD\x3\x2\x2"+
		"\x2\xCD\xCF\a\xE\x2\x2\xCE\xD0\a\x10\x2\x2\xCF\xCE\x3\x2\x2\x2\xCF\xD0"+
		"\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD3\a\x6\x2\x2\xD2\xAE\x3\x2\x2\x2"+
		"\xD2\xB3\x3\x2\x2\x2\xD2\xB8\x3\x2\x2\x2\xD2\xC5\x3\x2\x2\x2\xD3#\x3\x2"+
		"\x2\x2\xD4\xD6\a\x5\x2\x2\xD5\xD7\a\x10\x2\x2\xD6\xD5\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\a\x11\x2\x2\xD9\xDB\a\x10"+
		"\x2\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC"+
		"\xE7\a\x15\x2\x2\xDD\xDF\a\x5\x2\x2\xDE\xE0\a\x10\x2\x2\xDF\xDE\x3\x2"+
		"\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE3\a\x11\x2\x2\xE2"+
		"\xE4\a\x10\x2\x2\xE3\xE2\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\x3\x2"+
		"\x2\x2\xE5\xE7\a\x16\x2\x2\xE6\xD4\x3\x2\x2\x2\xE6\xDD\x3\x2\x2\x2\xE7"+
		"%\x3\x2\x2\x2\xE8\xEA\a\x5\x2\x2\xE9\xEB\a\x10\x2\x2\xEA\xE9\x3\x2\x2"+
		"\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEE\a\x12\x2\x2\xED\xEF"+
		"\a\x10\x2\x2\xEE\xED\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF0\x3\x2\x2"+
		"\x2\xF0\xFB\a\x15\x2\x2\xF1\xF3\a\x5\x2\x2\xF2\xF4\a\x10\x2\x2\xF3\xF2"+
		"\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\a\x12\x2"+
		"\x2\xF6\xF8\a\x10\x2\x2\xF7\xF6\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9"+
		"\x3\x2\x2\x2\xF9\xFB\a\x16\x2\x2\xFA\xE8\x3\x2\x2\x2\xFA\xF1\x3\x2\x2"+
		"\x2\xFB\'\x3\x2\x2\x2\xFC\xFD\t\x3\x2\x2\xFD)\x3\x2\x2\x2\xFE\xFF\a\x6"+
		"\x2\x2\xFF+\x3\x2\x2\x2\x30\x31\x34\x38=@\x44HLNV[^\x61gjn}\x81\x85\x8A"+
		"\x8F\x93\x99\x9D\xA1\xA6\xAC\xB0\xB5\xBA\xBE\xC2\xC7\xCB\xCF\xD2\xD6\xDA"+
		"\xDF\xE3\xE6\xEA\xEE\xF3\xF7\xFA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Practica2
